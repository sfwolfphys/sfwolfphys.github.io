install.packages("viridis")
setwd("~/website/_posts")
blogdown::serve_site()
help("sample")
makeNewDie = function(N=6,sides=1:N){
newSides = sample(sides)
newDie = list(N=N,sides=sides)
return(newDie)
}
makeNewDie()
makeNewDie = function(N=6,sides=1:N){
newSides = sample(sides)
newDie = list(N=N,sides=newSides)
return(newDie)
}
makeNewDie()
sample(1:N)
sample(1:6)
makeNewDie = function(N=6,sides=1:N){
newSides = sample(sides,replace=TRUE)
newDie = list(N=N,sides=newSides)
return(newDie)
}
makeNewDie()
makeNewDie(makeNewDie())
makeNewDie = function(sides=1:N){
newSides = sample(sides,replace=TRUE)
return(newSides)
}
makeNewDie(makeNewDie())
N=6
makeNewDie = function(sides=1:N){
newSides = sample(sides,replace=TRUE)
return(newSides)
}
makeNewDie()
makeNewDie(makeNewDie())
makeNewDie(makeNewDie(makeNewDie(makeNewDie())))
playDieGame = function(N){
roll = 1
dieSides = 1:N
uniqueDieSides = unique(dieSides)
while(length(uniqueDieSides)>1){
# Roll the dice
roll = roll + 1
dieSides = makeNewDie(dieSides)
uniqueDieSides = unique(dieSides)
}
return(roll)
}
playDieGame(6)
playDieGame(6)
playDieGame(6)
### Results for N=6
```{r echo=TRUE}
playDieGame(6)
```
playDieGame(6)
playDieGame(6)
playDieGame(6)
playDieGame(6)
mean(gameResult)
n = 10000
gameResult = replicate(n, playDieGame(6))
mean(gameResult)
head(gameResult)
sd(gameResult)
sd(gameResult)/sqrt(n)
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult))
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult))
abline(v=mean(gameResult),col='red',lty=3)
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult',type='l')
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult')
abline(v=mean(gameResult),col='red',lty=3)
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
avgResult = mean(gameResult)
seResult = sd(gameResult)/sqrt(n)
# Calculate the results
print(paste('The average roll result is',round(avgResult,3)))
print(paste('The standard error of the mean is',round(seResult,3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult')
abline(v=mean(gameResult),col='red',lty=3)
knitr::opts_knit$set(base.dir = "/home/swolf/website/", base.url = "/")
knitr::opts_chunk$set(fig.path = "figure/2020-03-31-unfairDie")
makeNewDie = function(sides){
newSides = sample(sides,replace=TRUE)
return(newSides)
}
playDieGame = function(N){
roll = 1
dieSides = 1:N
uniqueDieSides = unique(dieSides)
while(length(uniqueDieSides)>1){
# Roll the dice
roll = roll + 1
dieSides = makeNewDie(dieSides)
uniqueDieSides = unique(dieSides)
}
return(roll)
}
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
avgResult = mean(gameResult)
seResult = sd(gameResult)/sqrt(n)
# Calculate the results
print(paste('The average roll result is',round(avgResult,3)))
print(paste('The standard error of the mean is',round(seResult,3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult')
abline(v=avgResult,col='red',lty=3)
nSims = 1000
dieSides = 5:20
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.5, col="blue", lwd=2)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=0.5, angle=90, length=0.5, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:20,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=0.5, angle=90, length=0.5, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:20,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.5, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:20,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(avgRes ~ dieSides)
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(avgRes ~ dieSides)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(avgRes ~ dieSides)
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
dieRoll.lm = lm(log(avgRes) ~ log(dieSides))
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(log(avgRes) ~ log(dieSides))
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(log10(avgRes) ~ log10(dieSides))
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100,300,1000)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
install.packages('xtable')
library(xtable)
install.packages('devtools')
install.packages('blogdown')
blogdown::build_site()
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages('knitr')
install.packages(c("backports", "tinytex"))
