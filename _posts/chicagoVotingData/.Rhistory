install.packages("viridis")
setwd("~/website/_posts")
blogdown::serve_site()
help("sample")
makeNewDie = function(N=6,sides=1:N){
newSides = sample(sides)
newDie = list(N=N,sides=sides)
return(newDie)
}
makeNewDie()
makeNewDie = function(N=6,sides=1:N){
newSides = sample(sides)
newDie = list(N=N,sides=newSides)
return(newDie)
}
makeNewDie()
sample(1:N)
sample(1:6)
makeNewDie = function(N=6,sides=1:N){
newSides = sample(sides,replace=TRUE)
newDie = list(N=N,sides=newSides)
return(newDie)
}
makeNewDie()
makeNewDie(makeNewDie())
makeNewDie = function(sides=1:N){
newSides = sample(sides,replace=TRUE)
return(newSides)
}
makeNewDie(makeNewDie())
N=6
makeNewDie = function(sides=1:N){
newSides = sample(sides,replace=TRUE)
return(newSides)
}
makeNewDie()
makeNewDie(makeNewDie())
makeNewDie(makeNewDie(makeNewDie(makeNewDie())))
playDieGame = function(N){
roll = 1
dieSides = 1:N
uniqueDieSides = unique(dieSides)
while(length(uniqueDieSides)>1){
# Roll the dice
roll = roll + 1
dieSides = makeNewDie(dieSides)
uniqueDieSides = unique(dieSides)
}
return(roll)
}
playDieGame(6)
playDieGame(6)
playDieGame(6)
### Results for N=6
```{r echo=TRUE}
playDieGame(6)
```
playDieGame(6)
playDieGame(6)
playDieGame(6)
playDieGame(6)
mean(gameResult)
n = 10000
gameResult = replicate(n, playDieGame(6))
mean(gameResult)
head(gameResult)
sd(gameResult)
sd(gameResult)/sqrt(n)
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult))
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult))
abline(v=mean(gameResult),col='red',lty=3)
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult',type='l')
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
# Calculate the results
print(paste('The average roll result is',round(mean(gameResult),3)))
print(paste('The standard error of the mean is',round(sd(gameResult)/sqrt(n),3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult')
abline(v=mean(gameResult),col='red',lty=3)
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
avgResult = mean(gameResult)
seResult = sd(gameResult)/sqrt(n)
# Calculate the results
print(paste('The average roll result is',round(avgResult,3)))
print(paste('The standard error of the mean is',round(seResult,3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult')
abline(v=mean(gameResult),col='red',lty=3)
knitr::opts_knit$set(base.dir = "/home/swolf/website/", base.url = "/")
knitr::opts_chunk$set(fig.path = "figure/2020-03-31-unfairDie")
makeNewDie = function(sides){
newSides = sample(sides,replace=TRUE)
return(newSides)
}
playDieGame = function(N){
roll = 1
dieSides = 1:N
uniqueDieSides = unique(dieSides)
while(length(uniqueDieSides)>1){
# Roll the dice
roll = roll + 1
dieSides = makeNewDie(dieSides)
uniqueDieSides = unique(dieSides)
}
return(roll)
}
n = 10000
# Simulate the die game n times
gameResult = replicate(n, playDieGame(6))
avgResult = mean(gameResult)
seResult = sd(gameResult)/sqrt(n)
# Calculate the results
print(paste('The average roll result is',round(avgResult,3)))
print(paste('The standard error of the mean is',round(seResult,3)))
# Make a plot
plot(ecdf(gameResult),main='',ylab='ecdf(gameResult)',xlab='gameResult')
abline(v=avgResult,col='red',lty=3)
nSims = 1000
dieSides = 5:20
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.5, col="blue", lwd=2)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=0.5, angle=90, length=0.5, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:20,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=0.5, angle=90, length=0.5, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:20,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.5, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:20,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(avgRes ~ dieSides)
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(avgRes ~ dieSides)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(avgRes ~ dieSides)
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
dieRoll.lm = lm(log(avgRes) ~ log(dieSides))
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(log(avgRes) ~ log(dieSides))
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
dieRoll.lm = lm(log10(avgRes) ~ log10(dieSides))
summary(dieRoll.lm)
plot(dieSides,avgRes,type='p',col='blue',xlab='Number of sides on the die',
ylab='Average number of rolls to end the game',log='xy')
abline(dieRoll.lm,col='red',lty=2)
arrows(x0=dieSides, y0=avgRes-seRes, x1=dieSides, y1=avgRes+seRes,
code=3, angle=90, length=0.1, col="blue", lwd=2)
nSims = 1000
dieSides = c(5:10,30,50,70,100,300,1000)
avgRes = NULL
seRes = NULL
for(nSides in dieSides){
# Simulate the die game nSims times
gameRes = replicate(nSims, playDieGame(nSides))
avgRes = c(avgRes, mean(gameRes))
seRes = c(seRes, sd(gameRes)/sqrt(nSims))
}
install.packages('xtable')
library(xtable)
install.packages('devtools')
install.packages('blogdown')
blogdown::build_site()
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages('knitr')
install.packages(c("backports", "tinytex"))
blogdown::build_site()
setwd('..')
blogdown::build_site()
2012-1981
-5
2012-1986
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
choose(5,5)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
x = 1:10
y = 10:1
plot(x,y)
plot(x,y,col='blue')
plot(x,y,col='blue',type='l')
plot(x,y,col='blue',type='l',xlab = "My x variable")
plot(x,y,col='blue',type='l',xlab = "My x variable", xlim=c(0,20))
c(0,20)
c(0,20,2)
6
7
c(0,20,2,6,234,573)
source('~/website/_posts/chicagoVotingData/cleanChicagoData.R')
setwd("_posts/chicagoVotingData/")
source('~/website/_posts/chicagoVotingData/cleanChicagoData.R')
source('~/website/_posts/chicagoVotingData/cleanChicagoData.R')
library(tidyverse)
library(readxl)
# read the whole thing into a single file
wholeworksheet  <- read_excel('chicagoResults.xlsx')
# find the blank rows
blankrows  <- tibble(blanks = which(is.na(wholeworksheet[1]))) %>%
mutate(dif = blanks - lag(blanks), rownum = row_number(),
startrow = ifelse(rownum == 1, 1, NA),
startrow = coalesce(ifelse(dif == 1, lag(startrow, default =1), lag(blanks + 1)), 1)
)
# get the end rows of each table
endrows  <- blankrows %>%
group_by(startrow) %>%
summarize(
endrow = min(blanks)
)
# combine start and end rows into a single table
tableindex <- blankrows %>%
left_join(endrows, by = 'startrow') %>%
distinct(startrow, endrow)
blankrows
endrows
# combine start and end rows into a single table
tableindex <- blankrows %>%
left_join(endrows, by = 'startrow') %>%
distinct(startrow, endrow)
tableindex
# the last blank row is probably just before the last table in the sheet
if(nrow(wholeworksheet) > max(blankrows$blanks)) {
lasttable  <- data_frame(startrow = max(blankrows$blanks) + 1,
endrow = nrow(wholeworksheet))
tableindex  <- tableindex %>%
bind_rows(lasttable)
}
View(lasttable)
View(tableindex)
# split your tables up into a list of tables
alistoftables  <- map(1:nrow(tableindex),
~ wholeworksheet[tableindex$startrow[.x]:tableindex$endrow[.x] , ]  )
wardVoteTalliesRaw = alistoftables[- c(1:4)]
thisWard = wardVoteTalliesRaw[[1]]
thisWard[2, ]
thisWard[1,1]
cleanWardTibble = function(thisWard){
ward = thisWard[1,1]
rawCountData = thisWard[3:(nrow(thisWard)-2), ]
cleanWard = data.frame(ward,rawCountData)
names(cleanWard) = c('ward','precinct','totVotes','BidenVotes','BidenPct',
'TrumpVotes','TrumpPct','HawkinsVotes','HawkinsPct',
'LaRivaVotes','LaRivaPct','CarrollVotes','CarrollPct',
'JorgensenVotes','JorgensenPct')
countCols = c(3,4,6,8,10,12,14)
cleanWard[ ,countCols] = sapply(cleanWard[ ,countCols],FUN=as.numeric)
return(cleanWard)
}
wardVoteTallies = lapply(wardVoteTalliesRaw,cleanWardTibble)
View(wardVoteTallies)
voteTally = NULL
for(i in 1:length(wardVoteTallies)){
voteTally = rbind(voteTally,wardVoteTallies[[i]])
}
View(voteTally)
